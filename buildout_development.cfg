#This buildout is for local development.

[buildout]

extends = 
# we need zope only to make zope.testrecorder run, if you have problems, just delete it
    http://good-py.appspot.com/release/zope/2.13.10
    versions.cfg
    buildout_common.cfg
    mailserver.cfg

parts += 
    adhocracy_unthemed_conf
    solr_download
    solr
    redis
    redis_conf
    libevent
    memcached
    memcached_setup
    test
    omelette
    supervisor
    test
    coveragereport
    sphinxbuilder
    instance 
    testrecorder 
    nose
# configs for running automated tests
    test_supervisor
    test_solr
    test_adhocracy_conf
    test_redis_conf

# Pull und update each package to get the newest versions
always-checkout = true

##############################################################################  
# Aditional eggs
##############################################################################
 
eggs +=  
#ease development
    adhocracy [test]
    Babel
    ipython
    ipdb
    nose
    Werkzeug
    WebError


##############################################################################  
#Override settings from buildout_common.cfg    
##############################################################################  
[adhocracy]
debug = True
smtp_port = 8823

[ports]
mailserver_port = ${adhocracy:smtp_port}  
mailserver_logging_port = 8825

[adhocracy_code]
branch = default
#add custom theme package
#diazo_theme_rules_dir = ${buildout:directory}/src/adhocracy.wordpressbasic_theme/adhocracy/wordpressbasic_theme
diazo_theme_rules_dir = ${buildout:directory}/src/adhocracy.adhocracy_theme/adhocracy/adhocracy_theme

[sources]
# change to `hg ssh://hg@bitbucket.org` urls to pull via ssh
adhocracy = hg https://bitbucket.org/liqd/adhocracy [branch=${adhocracy_code:branch}]
#add custom theme package
adhocracy.adhocracy_theme = hg https://bitbucket.org/liqd/adhocracy.adhocracy_theme
adhocracy.wordpressbasic_theme = hg https://bitbucket.org/liqd/adhocracy.wordpressbasic_theme

[domains]
main = adhocracy.lan
# generate internal urls with port 5001 to be able to work without a
# proxy (e.g. apache with ReverseProxy, see /etc/vhost.ini.in)
# on a port != 80
main.force_port = True
#add custom wordpress backend
blog = adhocracystaticpages.liqd.net
test_main = test.lan

[paster]
eggs += ZopeSkel
 
##############################################################################  
#Additional server conifg without diazo themeing   
##############################################################################  

[ports]
main_unthemed = 5002
test_solr = 5011
test_memcached = 5012
test_supervisor = 5013
test_redis = 5014

[domains]
main_unthemed.force_port = True
test_solr = localhost
test_redis = 127.0.0.1
 
[adhocracy_unthemed_conf] 
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/etc/unthemed.ini.in
output = ${buildout:directory}/etc/unthemed.ini

##############################################################################  
# Set up supervisor to run it all
##############################################################################

[supervisor]
programs =
    0 redis ${buildout:directory}/bin/redis-server [${buildout:directory}/etc/redis.conf]
    20 memcached ${memcached:location}/bin/memcached [-l 127.0.0.1 -p ${ports:memcached} -U ${ports:memcached} -u nobody]
    30 solr ${buildout:directory}/bin/solr-instance [fg]
    40 worker ${buildout:directory}/bin/paster [--plugin=adhocracy worker -c ${buildout:directory}/etc/adhocracy.ini]
#    45 adhocracy ${buildout:directory}/bin/paster [serve ${buildout:directory}/etc/adhocracy.ini]
 
##############################################################################  
# Testing stuff   
##############################################################################  

[test]
recipe = pbp.recipe.noserunner
eggs = ${buildout:eggs}
       ipdbplugin
# -s: Don't capture stdout (any stdout output will be
#     printed immediately). Necessary to use pdb during test
# -q: be less verbose
defaults = 
   -s -q --with-pylons=${buildout:directory}/src/adhocracy/test.ini ${buildout:directory}/src/adhocracy

[coveragereport]
recipe = zc.recipe.egg
eggs = createcoverage    

[sphinxbuilder]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:directory}/src/adhocracy/docs
build = ${buildout:directory}/docs
eggs = ${buildout:eggs}

[instance]
recipe = plone.recipe.zope2instance
user = test:test
http-address = 8088
eggs =
  zope.testrecorder
zcml =
  zope.testrecorder


[testrecorder]
# start your local adhocracy server 
# run bin/testrecorder_start to open you browser
# submit the local adhocracy server url
# record a use_case/acceptance test run - http://plone.org/documentation/kb/testing/zope-testrecorder
recipe = plone.recipe.command
command = echo 'xdg-open "http:localhost:${instance:http-address}/++resource++recorder/index.html"' > bin/testrecorder.sh
          chmod a+x bin/testrecorder.sh


[test_supervisor]
#
# Note that it can start rabbitmq with the same
# config used for the non test supervisor. This will fail if the
# other rabbitmq is running already, but that won't hurt cause
# etc/test.ini.in uses a different queue so they won't interfere
# each other.
#
recipe = collective.recipe.supervisor
logfile = ${buildout:directory}/var/test/log/supervisord.log
port = 127.0.0.1:${ports:test_supervisor}
user = super
password = Xld)0_+e1
pp = ${buildout:directory}/parts/omelette/supervisor/pidproxy.py
programs =
    0 redis (stdout_logfile=${buildout:directory}/var/test/log/redis.log) ${buildout:directory}/bin/redis-server [${buildout:directory}/etc/test.redis.conf] true
    20 memcached (stdout_logfile=${buildout:directory}/var/test/log/memcached.log) ${memcached:location}/bin/memcached [-l 127.0.0.1 -p ${ports:test_memcached} -U ${ports:test_memcached}] true
    30 solr (stdout_logfile=${buildout:directory}/var/test/log/solr.log) ${buildout:directory}/bin/test-solr-instance [fg] true
    40 worker (stdout_logfile=${buildout:directory}/var/test/log/worker.log) ${buildout:directory}/bin/paster [--plugin=adhocracy worker -c ${buildout:directory}/etc/test.ini] true


[test_solr]
recipe = collective.recipe.solrinstance
solr-location = ${solr_download:location}
host = ${domains:test_solr}
port = ${ports:test_solr}
max-num-results = 500
#we use a static config file, there is nothing auto generated...
schema-template = ${buildout:directory}/src/adhocracy/solr/schema.xml
unique-key = id
index =
    name:id type:string indexed:true stored:true required:true
filter =
script = ${buildout:directory}/bin/test-solr-instance
vardir = ${buildout:directory}/var/test/solr
logdir = ${buildout:directory}/var/test/solr


[test_adhocracy_conf] 
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/etc/test.ini.in
output = ${buildout:directory}/etc/test.ini


[test_redis_conf] 
recipe = collective.recipe.template      
input = ${buildout:directory}/etc/test.redis.conf.in
output = ${buildout:directory}/etc/test.redis.conf


[nose]
recipe = zc.recipe.egg:scripts
egg = nose
eggs = ${buildout:eggs}