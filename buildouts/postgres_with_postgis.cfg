##############################################################################  
# Buildout to install postgresql with postgis
#
# requires: 
#    - actived python virtualenv shell (to install gdal)
#    - buildtools
#    - Linux (the shapely part works only with Linux)
#
##############################################################################
 
[buildout]

extends = postgres.cfg
eggs += 
    geoalchemy
    geojson
parts +=
    ncurses
    readline
    geos
    proj
#   gdal
   postgresql
   postgis
   postgresql-symlinks
   cython-src
   cython-install
#   mapnik
   shapely
   postgresql-initdb
   supervisor

##############################################################################  
# Sytem settings
##############################################################################

[ports]
postgres = 5008
supervisor = 5010

##############################################################################  
# Postgres settings
##############################################################################
 
[urls]
cython = Cython-0.17.1
geos = http://download.osgeo.org/geos/geos-3.3.6.tar.bz2
postgis = http://download.osgeo.org/postgis/source/postgis-2.0.2.tar.gz
gdal = http://download.osgeo.org/gdal/gdal-1.9.2.tar.gz
proj = http://download.osgeo.org/proj/proj-4.8.0.tar.gz
mapnik = https://github.com/downloads/mapnik/mapnik/mapnik-v2.0.1.tar.bz2

[postgres]
dbname = adhocracy
dbuser = adhocracy
 
##############################################################################  
# Install postgis and dependencies
##############################################################################

[proj]
url = ${urls:proj}
recipe = zc.recipe.cmmi

[geos]
recipe = zc.recipe.cmmi
url = ${urls:geos}

[mapnik]
recipe = hexagonit.recipe.cmmi
url = ${urls:mapnik}
configure-options =
    PREFIX = ${buildout:directory}/parts/mapnik

# gdal is needed if postgis is compiled --with-raster
[gdal]
recipe = hexagonit.recipe.cmmi
url = ${urls:gdal}
configure-options =
    CFLAGS=-I${geos:location}/include
    LDFLAGS=-L${geos:location}/lib
    --with-geos=${geos:location}/bin/geos-config
    --with-python
  
[postgis]
recipe = zc.recipe.cmmi
url = ${urls:postgis}
keep-compile-dir = true
extra_options =
#    --prefix=${postgresql:location}
    --with-pgconfig=${postgresql:location}/bin/pg_config
    --with-geosconfig=${geos:location}/bin/geos-config
    --with-projdir=${proj:location}
    --with-xml2config=${lxml:location}/libxml2/bin/xml2-config
    --without-raster

[cython-src]
recipe = hexagonit.recipe.download
url = http://pypi.python.org/packages/source/C/Cython/${urls:cython}.tar.gz

[cython-install]
recipe = z3c.recipe.egg:setup
setup = ${cython-src:location}/${urls:cython}
args =
    clean
    build
    install

[shapely]
recipe = minitage.recipe.egg
egg = shapely
cflags-Linux = -I${buildout:directory}/parts/geos/include 
ldflags-Linux = -L${buildout:directory}/parts/geos/lib 
 
##############################################################################  
# Build postres with postgis support
##############################################################################
 
[postgresql]
configure-options =
    --with-pgport=${ports:postgres}

[postgresql-initdb]
cmds = 
# init database
    if [ ! -f ${postgres:initdb_dir}/pg_ident.conf ]]
    then
    export LD_LIBRARY_PATH="${geos:location}/lib:${proj:location}/lib"
    ${buildout:directory}/bin/initdb -D ${postgres:initdb_dir}  
    ${buildout:directory}/bin/pg_ctl -D ${postgres:initdb_dir} start
    sleep 10   
# create user and database
    ${buildout:directory}/bin/createuser --no-superuser --no-createrole --no-createdb ${postgres:dbuser}
    ${buildout:directory}/bin/createdb -E UTF8 -O ${postgres:dbuser} ${postgres:dbname}
# create postgis extension
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -f ${postgresql:location}/share/contrib/postgis-2.0/postgis.sql
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -f ${postgresql:location}/share/contrib/postgis-2.0/spatial_ref_sys.sql
#Because geoalchemy doesn't fully work with PostGIS 2.x yet, we remove PostGIS
#functions which we don't need, which would otherwise result in an error because
#of lack of explicit type casts by geoalchemy (see
#https://trac.osgeo.org/postgis/ticket/1869)
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -c "drop function st_asbinary (geography);"
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -c "drop function st_asbinary (geography, text);"
# change ownership (needed?)
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -c "grant all privileges on database ${postgres:dbname} to ${postgres:dbuser};" 
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -c "grant all on table spatial_ref_sys to ${postgres:dbuser};" 
    ${buildout:directory}/bin/psql -d ${postgres:dbname} -c "grant all on table geometry_columns to ${postgres:dbuser};"
    ${buildout:directory}/bin/pg_ctl -D ${postgres:initdb_dir} stop
    fi

                                                                                                                                                                           
##############################################################################  
# Set up supervisor to run it all
##############################################################################
 
[supervisor]
environment = LD_LIBRARY_PATH="${geos:location}/lib:${proj:location}/lib"

   
