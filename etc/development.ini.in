#
# WARNING: Please make you changes here and then run buildout to install the adhocracy config file:
#     $ bin/buildout -Nc buildout-development.cfg install adhocracy_conf
# The generated config file is here: parts/development.ini
#
[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
email_to = ${adhocracy:email.to}
smtp_server = localhost
error_email_from = ${adhocracy:email.from} 

[server:main]
use = egg:Paste#http
host = 127.0.0.1
port = ${ports:main}

[composite:main]
use = egg:Paste#urlmap
/static_theme = static
/_wordpress = wordpress_pipe
/ = default

###################diazo theme adhocracy ###################

# Serve the theme from disk from /static (as set up in [composite:main])
[app:static]
use = egg:Paste#static
document_root = ${buildout:directory}/src/adhocracy.enquete_theme/adhocracy/enquete_theme

# Serve the Diazo-transformed content everywhere else
[pipeline:default]
pipeline = theme
           content

#[filter:wsgirewrite]
#use = egg:WSGIRewrite
#rulesets = testurls

#[wsgirewrite:testurls]
#rule1 = ^/test$ /index

# Reference the rules file and the prefix applied to relative links
# (e.g. the stylesheet). We turn on debug mode so that the theme is
# re-built on each request, making it easy to experiment.

[filter:theme]
use = egg:diazo
read_network = True
rules = ${rules} 
prefix = /static_theme
debug = true
wordpress_backend = ${domains:blog} 
wordpress_backend_startseite = ${domains:blog}/startseite/

###################diazo theme wordpress ###################

[pipeline:wordpress_pipe]
pipeline = theme
           _wordpress
 
# Proxy wordpress 
[app:_wordpress]
use = egg:Paste#proxy
address = http://${domains:blog} 
suppress_http_headers = accept-encoding

###################Adhocracy conf ###################

#WARNING changed name: #[app:main] 

[app:content]
use = egg:adhocracy
full_stack = true
static_files = true

cache_dir = ${buildout:directory}/var/data
beaker.session.key = adhocracy_state
# INSTALL: Replace this with a randomly generated hash value:
beaker.session.secret = ${adhocracy:secret}

# INSTALL: Insert your domain name here. Make sure to include the 
# dot at the beginning of each domain to create wildcard cookies. 
# Also make sure this is identical to the adhocracy.domains setting
# below. 
beaker.session.cookie_domain = .${domains:main} 
session.domain =  .${domains:main} 

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
beaker.cache.data_dir = ${buildout:directory}/var/data/cache
beaker.session.data_dir = ${buildout:directory}/var/data/sessions

# INSTALL: Locate your Memcached server if installed. Otherwise comment this out.  
memcached.server = 127.0.0.1:${ports:memcached}

# INSTALL: SQLAlchemy database URL
sqlalchemy.url = ${adhocracy:sqlalchemy.url}

# INSTALL: Uncommenting this line will delete all locally saved data and drop 
# the entire database. Please only use this if you have a backup ready. 
# Yes, that's a magic string. 
## adhocracy.setup.drop = KILL_EM_ALL
#

adhocracy.solr.url = http://${domains:main}:${ports:solr}/solr

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# INSTALL: Set up the Adhocracy domain name. This will be used to determine the
# active instance, e.g. "Test Instance" for test.adhocracy.lan. 
adhocracy.domain = ${domains:main} 
adhocracy.protocol = ${adhocracy:protocol}

# INSTALL: Set a site name for all instances. This will be used as a part of 
# the html <title>, notification E-Mails etc. 
adhocracy.site.name = ${adhocracy:site.name}
adhocracy.language = ${adhocracy:language}

# INSTALL: The site directory contains your site modifications of Adhocracy 
# (e.g. logos, CSS, html pages). A skeleton site directory will be created 
# by the "setup-app" paster command. 
adhocracy.site.dir = ${buildout:directory}/var/site

# INSTALL: A nice E-Mail address. 
adhocracy.email.from = ${adhocracy:email.from}

# INSTALL: Twitter. Since there is currently no option to take it out of the UI, 
# you will want to use Twitter. Create an OAuth application to allow users to 
# link their profiles: https://twitter.com/oauth_clients
adhocracy.twitter.username = ${twitter:username}
adhocracy.twitter.key = ${twitter:key} 
adhocracy.twitter.secret = ${twitter:secret} 
adhocracy.twitter.consumer_key = ${twitter:consumer_key} 
adhocracy.twitter.consumer_secret = ${twitter:consumer_key} 

# INSTALL: bit.ly is used as a URL shortener. Since their API requires auth, you 
# can either leave the defaults here and give certain usage statistics to the 
# Adhocracy developers, or you can create an account at http://api.bit.ly
#adhocracy.bitly.login = 
#adhocracy.bitly.key = 

# INSTALL: the AMQP message queue, i.e. RabbitMQ. Make sure to use different 
# queue and exchange names for each install of Adhocracy. Queue processing is 
# unable to process messages related to another database. 
adhocracy.amqp.host = 127.0.0.1
#rabbitq default port is 5672
adhocracy.amqp.port = ${ports:rabbitmq} 
#adhocracy.amqp.event_queue = adhocracy.queue
adhocracy.amqp.event_exchange = adhocracy.exchange

# TODO: These are not currently evaluated. 
#adhocracy.amqp.userid = 
#adhocracy.amqp.password =

# INSTALL: If you want to use recaptcha uncomment these lines 
#recaptcha.public_key = 6LcICcgSAAAAAKNYq9iM4lIpB_GSjYItF21wS4NS
#recaptcha.private_key = 6LcICcgSAAAAAEJL1zhVbX6N0TGb0zVXD_g2lXSo

# TUNING: Memcache page fragments? 
adhocracy.cache_tiles = True

# adhocracy.instance = adhocracy

# Statistics via Piwik
piwik.site = http://stats.liqd.net/
piwik.id = 1


# Logging configuration
[loggers]
keys = root, adhocracy, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_adhocracy]
level = DEBUG
handlers =
qualname = adhocracy

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
